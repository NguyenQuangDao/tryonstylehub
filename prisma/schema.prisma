generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  type      String    @db.VarChar(50)
  imageUrl  String    @db.VarChar(1024)
  price     Float
  styleTags String    @db.Text  // Store as JSON string
  shopId    Int
  shop      Shop      @relation(fields: [shopId], references: [id])
  outfits   Outfit[]  @relation("OutfitProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Shop {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  url       String     @db.VarChar(1024)
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Outfit {
  id        Int        @id @default(autoincrement())
  style     String     @db.Text
  imageUrl  String?    @db.VarChar(1024)
  products  Product[]  @relation("OutfitProducts")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(255)
  name          String         @db.VarChar(255)
  password      String         @db.VarChar(255)  // Hashed password
  avatar        String?        @db.VarChar(1024)
  virtualModels VirtualModel[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TryOnHistory {
  id              Int      @id @default(autoincrement())
  userId          Int?
  modelImageUrl   String   @db.VarChar(1024)
  garmentImageUrl String   @db.VarChar(1024)
  resultImageUrl  String   @db.VarChar(1024)
  modelVersion    String   @db.VarChar(50)
  createdAt       DateTime @default(now())
}

model CostTracking {
  id          Int      @id @default(autoincrement())
  userId      Int?
  service     String   @db.VarChar(100)  // "openai", "fashn", "aws-s3"
  operation   String   @db.VarChar(100)  // "image-generation", "try-on", "upload"
  cost        Float
  details     String?  @db.Text  // JSON with additional details
  createdAt   DateTime @default(now())
}

model VirtualModel {
  id                Int      @id @default(autoincrement())
  userId            Int?
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  avatarName        String   @db.VarChar(255)
  isPublic          Boolean  @default(false)
  
  // Ready Player Me Integration
  readyPlayerMeUrl  String?  @db.VarChar(1024)  // Avatar URL from Ready Player Me
  readyPlayerMeId   String?  @db.VarChar(255)   // Ready Player Me avatar ID
  readyPlayerMeData String?  @db.Text           // JSON: Full avatar configuration data
  
  // Body Metrics (Required)
  height            Float    // cm
  weight            Float    // kg
  gender            String   @db.VarChar(50)  // "male", "female", "non-binary"
  
  // Body Metrics (Optional)
  bodyShape         String?  @db.VarChar(50)  // "slim", "balanced", "muscular", "curvy"
  skinTone          String?  @db.VarChar(50)  // "very-light", "light", "medium", "tan", "brown", "dark"
  muscleLevel       Int?     // 1-5
  fatLevel          Int?     // 1-5
  shoulderWidth     Float?   // cm
  waistSize         Float?   // cm
  hipSize           Float?   // cm
  legLength         Float?   // cm
  
  // Appearance (Hair - Required)
  hairColor         String   @db.VarChar(50)  // "black", "brown", "blonde", "red", "white", "other"
  hairStyle         String   @db.VarChar(50)  // "long", "short", "curly", "straight", "bald"
  
  // Appearance (Optional)
  eyeColor          String?  @db.VarChar(50)  // "brown", "black", "blue", "green", "gray", "amber"
  faceShape         String?  @db.VarChar(50)  // "round", "oval", "square", "triangle", "long"
  beardStyle        String?  @db.VarChar(50)  // "none", "goatee", "full", "stubble"
  tattoos           String?  @db.Text         // JSON or text description
  piercings         String?  @db.Text         // JSON or text description
  
  // Style (Optional)
  clothingStyle     String?  @db.VarChar(50)  // "sport", "elegant", "street", "gothic", "casual"
  accessories       String?  @db.Text         // JSON array
  footwearType      String?  @db.VarChar(50)  // "sneaker", "heels", "sandals", "boots"
  colorPalette      String?  @db.Text         // JSON array of colors
  
  // Additional
  ageAppearance     Int?     // Age appearance
  bodyProportionPreset String? @db.VarChar(50) // "supermodel", "athletic", "realistic"
  
  // Session tracking for anonymous users
  sessionId         String?  @db.VarChar(255)  // For anonymous users
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
  @@index([sessionId])
}

